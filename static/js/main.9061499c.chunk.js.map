{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","matches","givers","receivers","currentObj","santaStorageKey","matchesAry","createMatches","console","log","todaysMatches","dateStr","Date","toLocaleDateString","replaceAll","storedMatches","JSON","parse","localStorage","getItem","forEach","person","pool","filter","name","prevReceivers","prevRec","Object","entries","value","push","getPrevReceivers","randIndex","Math","floor","random","length","includes","n","setItem","stringify","stored","keys","getCurrentMatches","className","style","fontStyle","map","match","margin","onClick","alert","removeItem","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PA8GeA,MA3Gf,WACE,IAEIC,EAFAC,EAAS,CAAC,MAAM,MAAM,SAAS,SAAS,QAAQ,QAAQ,OACxDC,EAAY,CAAC,MAAM,MAAM,SAAS,SAAS,QAAQ,QAAQ,OAE/DF,EAAU,CACR,YAAa,CACX,IAAO,QACP,IAAO,QACP,OAAU,MACV,OAAU,MACV,MAAS,SACT,MAAS,UAEX,aAAc,CACZ,IAAO,SACP,IAAO,SACP,OAAU,MACV,OAAU,QACV,MAAS,MACT,MAAS,UAIb,IA4DgCG,EA5D1BC,EAAkB,uBACpBC,EAAa,GAmBjB,SAASC,IACPC,QAAQC,IAAI,iBACZ,IAAIC,EAAgB,GACdC,GAAU,IAAIC,MAAOC,qBAAqBC,WAAW,MAAO,KAG9DC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQd,IAEpDH,EAAOkB,SAAQ,SAAAC,GAWb,IATA,IAAIC,EAAOnB,EAAUoB,QAAO,SAAAC,GAAI,OAAIA,IAASH,KAGvCI,EAtBV,SAA0BD,EAAMvB,GAE9B,IADA,IAAIyB,EAAU,GACd,MAA2BC,OAAOC,QAAQ3B,GAA1C,eAAoD,CAAC,IAAD,0BAAnC4B,GAAmC,WAClDH,EAAQI,KAAKD,EAAML,IAGrB,OAAOE,EAgBiBK,CAAiBV,EAAQN,GAG3CiB,EAAYC,KAAKC,MAAMD,KAAKE,SAAWb,EAAKc,QAG1CX,EAAcY,SAASf,EAAKU,KAChCA,EAAYC,KAAKC,MAAMD,KAAKE,SAAWb,EAAKc,QAG9C1B,EAAcW,GAAUC,EAAKU,GAG7B7B,EAAYA,EAAUoB,QAAO,SAAAe,GAAC,OAAIA,IAAM5B,EAAcW,SAIxDN,EAAcJ,GAAWD,EACzBQ,aAAaqB,QAAQlC,EAAiBW,KAAKwB,UAAUzB,IAiBvD,OAhEAG,aAAaqB,QAAQlC,EAAiBW,KAAKwB,UAAUvC,IAGrDM,IAqDgCH,EANhC,WACE,IAAMqC,EAASzB,KAAKC,MAAMC,aAAaC,QAAQd,IAE/C,OAAOoC,EAAOd,OAAOe,KAAKD,GAAQd,OAAOe,KAAKD,GAAQL,OAAS,IAhD7BO,GAApCrC,EAoDSqB,OAAOC,QAAQxB,GAQ1B,yBAAKwC,UAAU,OACT,4BAAQA,UAAU,cAChB,iDACA,uBAAGC,MAAO,CAACC,UAAW,WAAtB,4DAEIxC,EAAWyC,KAAI,SAAAC,GACb,OAAO,yBAAKH,MAAO,CAACI,OAAO,IAAKC,QAAS,kBAAMC,MAAM,UAAD,OAAWH,EAAM,GAAjB,0DAAqEA,EAAM,GAA3E,QAAoFA,EAAM,OAGpJ,6BAAK,4BAAQE,QAAS,kBAb1BhC,aAAakC,WAAW/C,QACxBE,MAYS,wBC5FO8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9061499c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  let givers = [\"Dad\",\"Mom\",\"Ashley\",\"Andrew\",\"Katie\",\"Emily\",\"Jen\"];\n  let receivers = [\"Dad\",\"Mom\",\"Ashley\",\"Andrew\",\"Katie\",\"Emily\",\"Jen\"];\n  let matches = {};\n  matches = {\n    \"12-6-2020\": {\n      \"Dad\": \"Katie\",\n      \"Mom\": \"Emily\",\n      \"Ashley\": \"Mom\",\n      \"Andrew\": \"Dad\",\n      \"Katie\": \"Ashley\",\n      \"Emily\": \"Andrew\"\n    },\n    \"12-13-2020\": {\n      \"Dad\": \"Andrew\",\n      \"Mom\": \"Ashley\",\n      \"Ashley\": \"Dad\",\n      \"Andrew\": \"Emily\",\n      \"Katie\": \"Mom\",\n      \"Emily\": \"Katie\"\n    },\n  };\n\n  const santaStorageKey = 'secret-santa-matches';\n  let matchesAry = [];\n\n  // if storage item doesn't exist, add defined matches\n  localStorage.setItem(santaStorageKey, JSON.stringify(matches));  \n\n\n  createMatches();\n\n  matchesAry = getCurrentMatchesArray(getCurrentMatches());\n\n  function getPrevReceivers(name, matches) {\n    let prevRec = [];\n    for (const [key, value] of Object.entries(matches)) {\n      prevRec.push(value[name]);\n    }\n \n    return prevRec;\n  }\n\n  function createMatches() {\n    console.log('createMatches');\n    let todaysMatches = {};\n    const dateStr = new Date().toLocaleDateString().replaceAll(/\\//g, '-');\n\n    // get matches from localstorage\n    let storedMatches = JSON.parse(localStorage.getItem(santaStorageKey));\n\n    givers.forEach(person => {\n      // get available receivers by filtering out giver from list of possible receivers\n      let pool = receivers.filter(name => name !== person);\n\n      // get all previous receivers for the giver person\n      const prevReceivers = getPrevReceivers(person, storedMatches);\n\n      // randomly pick a number between 0 and length of receivers\n      let randIndex = Math.floor(Math.random() * pool.length);\n      \n      // while the randomly selected receiver matches \n      while(prevReceivers.includes(pool[randIndex])) {\n        randIndex = Math.floor(Math.random() * pool.length);\n      }\n      // match found! set it to the matches object\n      todaysMatches[person] = pool[randIndex];\n\n      // review the matched receiver from the available receivers list\n      receivers = receivers.filter(n => n !== todaysMatches[person]);\n    });\n\n    // add todays matches to matches\n    storedMatches[dateStr] = todaysMatches;\n    localStorage.setItem(santaStorageKey, JSON.stringify(storedMatches));  \n  }\n\n  function getCurrentMatches() {\n    const stored = JSON.parse(localStorage.getItem(santaStorageKey));\n    // get the last element in the stored matches object and return it\n    return stored[Object.keys(stored)[Object.keys(stored).length - 1]];\n  }\n\n  function getCurrentMatchesArray(currentObj) {\n    return Object.entries(currentObj);\n  }\n\n  function resetMatches() {\n    localStorage.removeItem(santaStorageKey); \n    createMatches(); \n  }\n  return (\n<div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Secret Santa App!</h1>\n        <p style={{fontStyle: \"italic\"}}>Click on your name to see who you are serving this week!</p>\n          {\n            matchesAry.map(match => {\n              return <div style={{margin:15}} onClick={() => alert(`Hello, ${match[0]}!  Your secret sibling to serve this week is...${match[1]}!`)}>{match[0]}</div>\n            })\n          }\n        <div><button onClick={() => resetMatches() }>Get New Matches!</button></div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}